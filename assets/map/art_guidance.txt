# Map Asset Art Guidance

## Overview
Large fantasy maritime world map for top-down continuous navigation.
Painterly art style, DOTA-inspired faction territories.

---

## World Map
**File**: world_map.png
**Size**: 1024x1024 pixels
**Background**: Opaque
**Status**: âœ“ Generated

**Prompt**:
```
A fantasy maritime world map from top-down perspective, painterly art style. Large ocean with scattered islands and continents. Left side has bright, lush green islands (Radiant territory) with golden coastlines. Right side has dark, volcanic islands (Dire territory) with red/black rocky shores. Center has neutral blue ocean. Shipping lanes visible as lighter blue paths. Deep water is dark blue, shallow water is light blue/turquoise. Stylized waves, artistic brush strokes, game map aesthetic. No text, no labels, just the painted world.
```

**Generation Command**:
```bash
python Imagine/imagine.py generate "A fantasy maritime world map from top-down perspective, painterly art style. Large ocean with scattered islands and continents. Left side has bright, lush green islands (Radiant territory) with golden coastlines. Right side has dark, volcanic islands (Dire territory) with red/black rocky shores. Center has neutral blue ocean. Shipping lanes visible as lighter blue paths. Deep water is dark blue, shallow water is light blue/turquoise. Stylized waves, artistic brush strokes, game map aesthetic. No text, no labels, just the painted world." assets/map/world_map.png --size 1024x1024 --quality high --background opaque
```

**Style Notes**:
- **Painterly style** - brush strokes visible, artistic not photorealistic
- **DOTA-inspired** - Radiant (left/west) vs Dire (right/east) territory split
- **Water depth variation** - dark blue deep ocean, light blue/turquoise shallows
- **Island variety** - lush green (Radiant), volcanic dark (Dire), neutral in center
- **Shipping lanes** - lighter blue paths suggest trade routes
- **No text/labels** - clean map, all labels added programmatically
- **Standard size** - 1024x1024 consistent with all other assets

**Color Guide**:
- Deep water: Dark blue (#000080 to #191970)
- Shallow water: Light blue/turquoise (#87CEEB to #40E0D0)
- Radiant islands: Lush green (#228B22), golden coastlines (#FFD700)
- Dire islands: Volcanic dark (#2F4F4F), red/black shores (#8B0000, #000000)
- Neutral islands: Varied earth tones

---

## Collision Data
**File**: collision_data.json
**Generated by**: detect_islands.py Python script
**Purpose**: Defines water/land collision boundaries for navigation

**Generation**:
```bash
python detect_islands.py
```

**With debug visualization**:
```bash
python detect_islands.py --visualize
```

This creates `islands_debug.png` showing detected land/water boundaries.

**Technical Notes**:
- Analyzes world_map.png pixel data
- Detects land vs water based on color thresholds
- Creates collision polygons for island boundaries
- JSON format for fast runtime loading
- Used by collision.js for boat navigation

---

## Islands Debug Visualization
**File**: islands_debug.png
**Generated by**: detect_islands.py with --visualize flag
**Purpose**: Visual debugging of collision detection

Shows:
- Red overlay on detected land areas
- Green overlay on detected water areas
- Collision boundaries highlighted
- Helps verify collision detection accuracy

---

## Future Map Enhancements

### Regional Maps (Optional)
If game expands, could generate zoomed regional maps:
- Radiant Archipelago detailed map
- Dire Territories detailed map
- Central Ocean detailed map

### Map Variants (Optional)
- Night version (darker colors, moonlight)
- Storm version (rough seas, darker atmosphere)
- Seasonal variants (winter ice, summer clear)

---

## Generation Tips
1. **Standard size** - All assets are 1024x1024 for consistency
2. **Consistent style** - Use same style keywords for any regeneration
3. **No text** - Critical for internationalization and dynamic labeling
4. **Color consistency** - Keep water/land colors distinct for collision detection
5. **Painterly aesthetic** - Matches overall game art style

## Technical Integration
- Loaded in renderer.js as Image object
- Rendered on Canvas using ctx.drawImage() with camera offset
- Camera system allows panning/zooming across full map
- Collision system uses pixel data to determine navigable water
- Map coordinates: center (0,0), range varies based on map size

